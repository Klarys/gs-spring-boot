version: 2 # use CircleCI 2.0
jobs:
  build:
    docker:
      - image: raspbian/stretch

    steps:
      - run:
          name: "Testing"
          command: echo "Hi"
      - run:
          # Update
          name: Install updates
          command: apt-get update && apt-get install -y build-essential libssl-dev uuid-dev libgpgme11-dev squashfs-tools libseccomp-dev wget pkg-config git cryptsetup
      - run:
          #Intall Go  
          name: Intall Go
          command: wget https://golang.org/dl/go1.15.linux-armv6l.tar.gz
            tar -zxvf go1.15.linux-armv6l.tar.gz -C /usr/local/
            echo 'export GOPATH=${HOME}/go' >> ~/.bashrc
            echo 'export PATH=/usr/local/go/bin:${PATH}:${GOPATH}/bin' >> ~/.bashrc
            source ~/.bashrc
      - run:
          #Intall Singularity
          name: Intall Singularity
          command: export VERSION=3.6.0 && wget https://github.com/sylabs/singularity/releases/download/v${VERSION}/singularity-${VERSION}.tar.gz && tar -xzf singularity-${VERSION}.tar.gz && cd singularity
            ./mconfig && make -C builddir && make -C builddir install
      - run:
          #Intall maven
          name: Intall Maven
          command:

      - run: 
          #Intall openjdk-11
          name: Install openjdk
          command:  wget -P /opt/jdk/ http://cdn.azul.com/zulu-embedded/bin/zulu11.31.16-ca-jdk11.0.3-linux_aarch32hf.tar.gz
            tar -zxvf /opt/jdk/zulu11.31.16-ca-jdk11.0.3-linux_aarch32hf.tar.gz -C /opt/jdk
            rm /opt/jdk/zulu11.31.16-ca-jdk11.0.3-linux_aarch32hf.tar.gz
            update-alternatives --install /usr/bin/java java /opt/jdk/zulu11.31.16-ca-jdk11.0.3-linux_aarch32hf/bin/java 1
            update-alternatives --install /usr/bin/javac javac /opt/jdk/zulu11.31.16-ca-jdk11.0.3-linux_aarch32hf/bin/javac 1
       - run:
          #Build the application
          name: Build Jar
          command: mvn clean install

       - run:
          #Download the .def file
          name: Download .def
          command: 

       - run:
          #Build the .sif file
          name: Build .sif
          command:

       - run:
          #Send .sif to IBM COS and update IoT
          name: Upload Sif and update IoT
          command: 



version: 2.1

orbs:
  node: circleci/node@3.0.0

jobs:
  build:
    working_directory: ~/mern-starter
    # Reuse Docker container specification given by the node Orb
    executor: node/default
    steps:
      - checkout
      # Install the latest npm - the node Orb takes care of it
      - node/install-npm
      # Install dependencies - the node Orb take care of installation and dependency caching
      - node/install-packages:
          app-dir: ~/mern-starter
          cache-path: node_modules
          override-ci-command: npm i
      # Save workspace for subsequent jobs (i.e. test)
      - persist_to_workspace:
          root: .
          paths:
            - .

  test:
    docker:
      # The primary container is an instance of the first image listed. The job's commands run in this container.
      - image: cimg/node:current
      # The secondary container is an instance of the second listed image which is run in a common network where ports exposed on the primary container are available on localhost.
      - image: mongo:4.2
    steps:
      # Reuse the workspace from the build job
      - attach_workspace:
          at: .
      - run:
          name: Demonstrate that Mongo DB is available as localhost
          command: |
            curl -sSJL https://www.mongodb.org/static/pgp/server-4.2.asc | sudo apt-key add -
            echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/4.2 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-4.2.list
            sudo apt update
            sudo apt install mongodb-org
            mongo localhost --eval 'db.serverStatus()'
      - run:
          name: Test
          command: npm test
      - run:
          name: Generate code coverage
          command: './node_modules/.bin/nyc report --reporter=text-lcov'
      # You can specify either a single file or a directory to store as artifacts
      - store_artifacts:
          path: test-results.xml
          destination: deliverable.xml
      - store_artifacts:
          path: coverage